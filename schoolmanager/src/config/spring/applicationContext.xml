<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:p="http://www.springframework.org/schema/p" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
	http://www.springframework.org/schema/tx 
	http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
	http://www.springframework.org/schema/aop 
	http://www.springframework.org/schema/aop/spring-aop-3.0.xsd">
	<!-- 验证码配置文件 -->
	<import resource="classpath:config/jcaptcha/jcaptcha.xml" />
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"
		destroy-method="close">
		<property name="driverClass">
			<value>oracle.jdbc.driver.OracleDriver</value>
		</property>
		<property name="jdbcUrl">
			<value>jdbc:oracle:thin:@localhost:1521:schoolapp</value>
		</property>
		<property name="user">
			<value>guest</value>
		</property>
		<property name="password">
			<value>guest</value>
		</property>
		<!--连接池中保留的最小连接数。 -->
		<property name="minPoolSize" value="10" />
		<!--连接池中保留的最大连接数。Default: 15 -->
		<property name="maxPoolSize" value="100" />
		<!--最大空闲时间,1800秒内未使用则连接被丢弃。若为0则永不丢弃。Default: 0 -->
		<property name="maxIdleTime" value="1800" />
		<!--当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。Default: 3 -->
		<property name="acquireIncrement" value="3" />
		<property name="maxStatements" value="1000" />
		<property name="initialPoolSize" value="10" />
		<!--每60秒检查所有连接池中的空闲连接。Default: 0 -->
		<property name="idleConnectionTestPeriod" value="60" />
		<!--定义在从数据库获取新连接失败后重复尝试的次数。Default: 30 -->
		<property name="acquireRetryAttempts" value="30" />
		<property name="breakAfterAcquireFailure" value="true" />
		<property name="testConnectionOnCheckout" value="false" />

	</bean>


	<!-- 定义Hibernate的SessionFactory -->
	<!-- 根据hibernate本地配置文件设置相关属性 -->
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate3.LocalSessionFactoryBean">
		<property name="dataSource" ref="dataSource"></property>
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">org.hibernate.dialect.Oracle10gDialect</prop>
			<!-- 	<prop key="hibernate.hbm2ddl.auto">validate</prop> 
				<prop key="hibernate.jdbc.batch_size">0</prop> -->
			</props>
		</property>
	 <property name="mappingResources">
			<list>
				<value>org/rschool/entity/hibernate/RAcademy.hbm.xml</value>
				<value>org/rschool/entity/hibernate/RClass.hbm.xml</value>
				<value>org/rschool/entity/hibernate/RResource.hbm.xml</value>
				<value>org/rschool/entity/hibernate/RResourceType.hbm.xml</value>
				<value>org/rschool/entity/hibernate/RSchool.hbm.xml</value>
				<value>org/rschool/entity/hibernate/RStudent.hbm.xml</value>
				<value>org/rschool/entity/hibernate/RTeacher.hbm.xml</value>
			</list>
		</property> 
	</bean>
	<!-- 配置Hibernate的局部事务管理器，使用HibernateTransactionManager类 -->
	<!-- 该类实现PlatformTransactionManager接口，是针对Hibernate的特定实现 -->
	<!-- 并注入SessionFactory的引用 -->
	<bean id="transactionManager"
		class="org.springframework.orm.hibernate3.HibernateTransactionManager"
		p:sessionFactory-ref="sessionFactory" />

	<!-- 配置事务增强处理Bean,指定事务管理器 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<!-- 用于配置详细的事务语义 -->
		<tx:attributes>
			<!-- 所有以'get'开头的方法是read-only的 -->
			<tx:method name="get*" read-only="true" />
			<!-- 其他方法使用默认的事务设置 -->
			<tx:method name="*" />
		</tx:attributes>
	</tx:advice>
	<aop:config>
		<!-- 配置一个切入点，匹配*Service业务逻辑层所有组件 两个Bean的所有方法的执行 -->
		<aop:pointcut id="leePointcut" expression="bean(*Service)" />
		<!-- 指定在leePointcut切入点应用txAdvice事务增强处理 -->
		<aop:advisor advice-ref="txAdvice" pointcut-ref="leePointcut" />
	</aop:config>
	<!-- 引入基本配置 -->
	<import resource="classpath:config/spring/base.xml" />
	<!-- 引入dao层配置 -->
	<import resource="classpath:config/spring/dao.xml" />

	<!-- 定义业务逻辑组件模板 -->
	<!-- 为之注入DAO组件 -->
	<bean id="serviceTemplate" abstract="true" lazy-init="true"
		p:baseDao-ref="baseDao" />
	<bean id="backPageService" class="org.rschool.service.impl.BackPageServiceImpl">
		<property name="pageDao" ref="pageDao"></property>
	</bean>
</beans>